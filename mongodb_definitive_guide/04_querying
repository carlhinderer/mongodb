----------------------------------------------------
CHAPTER 4 - QUERYING
----------------------------------------------------

- The 'find' Method

    - The 'find' method is used to perform queries in Mongo.  Which documents from the collection get 
        returned is determined by the first argument to 'find', the 'query document'.

        // Returns all documents in the collection
        > db.c.find()

        // Returns all documents matching a condition
        > db.users.find({'age' : 27})

        // Multiple conditions
        > db.users.find({'username' : 'joe', 'age' : 27})


    - You can specify which keys to return by passing a second document to 'find'.  Note that the '_id' key 
        is returned by default, unless you explicitly exclude it.

        // Return only the username and email keys
        > db.users.find({}, {'username' : 1, 'email' : 1})

        // Return all keys except for fatal_weakness
        > db.users.find({}, {'fatal_weakness' : 0})



- Limitations

    - Note that query documents must be constants as far as the database is concerned.  It cannot refer to
        the value of another key in the document.  For instance, if we have both 'in_stock' and 'num_sold'
        keys, we can't compare them to each other.

        // This won't work
        > db.stock.find({'in_stock' : 'this.num_sold'})



- Query Criteria

    - Queries can go beyond the exact matching described previously.  They can match more complex criteria,
        such as ranges, OR-clauses, and negation.


    - The comparison operators are '$lt', '$lte', '$gt', and '$gte'.  

        // Users 18-30 years old
        > db.users.find({'age' : {'$gte' : 18, '$lte' : 30}})

        // Users who registered before 2007
        > start = new Date('01/01/2007')
        > db.users.find({'registered' : {'$lt' : start}})


    - The '$ne' operator is used for 'not equal'.

        // Users not named 'joe'
        > db.users.find ({'username' : {'$ne' : 'joe'}})


    - The '$in' and '$nin' operators are used for testing membership.

        // Member in a set
        > db.raffle.find({'ticket_no' : {'$in' : [390, 542, 725]}})

        // Not a member
        > db.raffle.find({'ticket_no' : {'$nin' : [390, 542, 725]}})


    - The '$or' operator is used for OR queries.

        // Ticket number 725 or a winning ticket
        > db.raffle.find({'$or' : [{'ticket_no' : 725}, {'winner' : true}]})


    - The '$not' operator can negate any other condition.

        // Users whose id % 5 == 1
        > db.users.find({'id_num' : {'$mod' : [5, 1]}})

        // Users whose id % 5 != 1
        > db.users.find({'id_num' : {'$not' : {'$mod' : [5, 1]}}})



- Type-Specific Queries

    - Matching 'null' is a bit more complicated, because 'null' matches itself and also matches 'does not 
        exist'.  Thus, querying for null returns all documents lacking the key, as well as all documents
        in which the key has the value 'null'.

        // 'y' is null or 'y' is not present
        > db.c.find({'y' : null})

        // 'y' exists and is null
        > db.c.find({'y' : {'$eq' : null, '$exists' : true}})


    - Regular expressions can be matched.

        // Query with a regex
        > db.users.find({'name' : {'$regex' : /joe/i }})

        // More complex regex
        > db.users.find({'name' : /joey?/i })



- Matching Arrays

    - Arrays can also be queried.

        // If we have this array in the document
        > db.food.insertOne({'fruit' : ['apple', 'banana', 'peach']})

        // Then this query will match the document
        > db.food.find({'fruit' : 'banana'})



- Using $all

    - If you need to match arrays by more than one element, you can use $all.  This allows you to match
        a list of elements.  Ordering does not matter with $all.

        // Create a collection with 3 elements
        > db.food.insertOne({"_id" : 1, "fruit" : ["apple", "banana", "peach"]})
        > db.food.insertOne({"_id" : 2, "fruit" : ["apple", "kumquat", "orange"]})
        > db.food.insertOne({"_id" : 3, "fruit" : ["cherry", "banana", "apple"]})

        // Find all documents with both 'apple' and 'banana' elements
        > db.food.find({fruit : {$all : ["apple", "banana"]}})


    - You can also do an exact match of the array by omitting all.  In this case, ordering does matter, so
        if the elements aren't ordered in the same way, it won't match.

        > db.food.find({"fruit" : ["apple", "banana", "peach"]})


    - To query for a specific element at a specific position:

        > db.food.find({"fruit.2" : "peach"})



- Using $size

    - The $size conditional allows you to query for arrays of a given size.

        > db.food.find({"fruit" : {"$size" : 3}})



- Using $slice

    - The $slice operator can be used to return a subset of elements for an array key.

        // Return the first 10 comments
        > db.blog.posts.findOne(criteria, {"comments" : {"$slice" : 10}})

        // Return the last 10 comments
        > db.blog.posts.findOne(criteria, {"comments" : {"$slice" : -10}})


    - $slice can also return pages in the middle of the results by taking an offset and the number of
        elements to return.

        // Return elements 23-33
        > db.blog.posts.findOne(criteria, {"comments" : {"$slice" : [23, 10]}})


    - Unless otherwise specified, all keys in a document are 



- Returning a Matching Array Element

    - 


- Array and Range Query Interactions


- Querying on Embedded Documents


- $where Queries


- Cursors


- Limits, Skips, and Sorts


- Avoiding Large Skips


- Paginating Results Without skip


- Finding a Random Document


- Immortal Cursors