----------------------------------------------------
CHAPTER 1 - INTRO
----------------------------------------------------

- MongoDB Design Decisions

    1. Ease of Use

         - MongoDB is a document-oriented database, not a relational one.  A document is analagous to a
             row in a table.  The primary reason for moving away from the relational model is to make
             scaling out easier, but there are other advantages as well.

         - A document-oriented database replaces the concept of a 'row' with a more flexible model, the
             'document'.  A document can have emebedded documents and arrays, so complex hierarchical
             relationships can be represented with a single record.

         - There are no predefined schemas.  A document's keys and values are not of fixed types or sizes.
             This makes adding and removing fields easier.  This makes it easier to prototype and iterate.


    2. Designed to Scale

         - MongoDB was designed to scale out.  The document model makes it easier to split data across
             multiple servers.  

         - Mongo automatically takes care of balancing data and load across a cluster, routing reads and
             writes to the correct machines.  This is transparent to the application.


    3. Rich with Features

         - Mongo supports generic secondary indexes and provides unique, compound, geospatial, and full-text
             indexing as well.  Secondary indexes on nested documents and arrays are also supported.

         - Mongo provides an aggregation framework based on the concept of data processing pipelines.  
             This allows complex analytics engines to be built.

         - Mongo supports special collection and index types.  TTL collections for data that should expire
             at a certain time, such as for sessions or capped collections are included.  These are useful for holding recent data, such as logs.

         - Partial indexes for  documents that match a filter are also supported.

         - Mongo supports an easy-to-use protocol for storing large files and file metadata.

         - Mongo is missing some features common to relational databases, like multirow transactions and
             joins.


    4. Without Sacrificing Speed

         - Performance is a driving objective for Mongo, which has shaped much of its design.  It uses
             opportunistic locking in its WiredTiger storage engine to maximize concurrency and
             throughput.

         - It uses as much RAM as possible for its cache and attempts to automatically choose the correct
             indexes for queries.

         - For some functionality, the database offloads processing and logic to the client side (handled
             either by drivers or application code).