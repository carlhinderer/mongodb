-----------------------------------------------------------------------
|  CHAPTER 2 - MONGODB THROUGH THE JAVASCRIPT SHELL                   |
-----------------------------------------------------------------------

- Databases and Collections

    - To start the shell:

        $ mongo


    - Mongo stores related items in 'collections', which are similar to RDBMS tables.
        Collections are divided into 'databases', which in Mongo are just namespaces.

      At startup, the shell switches to a default database called 'test'.  To switch to
        a different database:

        # Show databases
        > show dbs

        # Switch to database
        > use tutorial

        # Show current database
        > db
        tutorial


    - Note that a database doesn't have to exist in order for you to switch to it.  Databases
        and collections are created only when documents are first inserted.  This is 
        consistent with Mongo's dynamic schema approach.

      However, if you are worried about errors arising from this, you can set most drivers
        to 'strict' mode to prevent careless errors.


    - Mongo has both databases and collections due to how Mongo writes data to disk.  All 
        collections in a database are grouped in the same files.



- Inserts and Queries

    - Let's insert a document in the 'users' collection.

        # Insert the user
        > db.users.insert({username: "smith"})


        # See the new document
        > db.users.find()
        { "_id" : ObjectId("552e458158cd52bcb257c324"), "username" : "smith" }


    - The '_id' field is the document's primary key.  Every document requires this
        field, and if it isn't present when the document is created, it will be 
        added.

      You can set your own '_id', otherwise it will be an instance of Mongo's default
        ObjectID.


    - To get the count in a collection:

        # Add another user
        > db.users.insert({username: "jones"})


        # Get user count
        > db.users.count()
        2


    - You can pass a query predicate to filter your results.

        # Get all users with empty predicate
        > db.users.find()


        # Filter the results
        > db.users.find({username: 'jones'})
        { "_id" : ObjectId("552e542a58cd52bcb257c325"), "username" : "jones" }


        # Filter on multiple fields (creates an implicit AND)
        > db.users.find({
        ... _id: ObjectId("552e458158cd52bcb257c324"),
        ... username: "smith"
        ... })

        { "_id" : ObjectId("552e458158cd52bcb257c324"), "username" : "smith" }


        # Can also use the explicit $and operator, query is the same
        > db.users.find({ $and: [
        ... { _id: ObjectId("552e458158cd52bcb257c324") },
        ... { username: "smith" }
        ... ] })

        { "_id" : ObjectId("552e458158cd52bcb257c324"), "username" : "smith" }


        # There is also an $or operator
        > db.users.find({ $or: [
        ... { username: "smith" },
        ... { username: "jones" }
        ... ]})

        { "_id" : ObjectId("552e458158cd52bcb257c324"), "username" : "smith" }
        { "_id" : ObjectId("552e542a58cd52bcb257c325"), "username" : "jones" }        



- Updating Documents

    - All updates require at least 2 arguments: the first specifies which documents to update
        and the second specifies how they should be modified.


    - The first type of update involves passing a document with some kind of operator 
        description as the second argument.

        # Operator update
        > db.users.update({username: "smith"}, {$set: {country: "Canada"}})


        # Look at the updated document
        > db.users.find({username: 'smith'})


    - Another way to update it is to replace it instead of just setting a field.

        # Replacement update, username field is removed
        > db.users.update({username: "smith"}, {country: "Canada"})

      Don't forget to use the $set operator if you just want to update a single field!


    - To remove a field, the $unset operator is used.

        # Remove the country field
        > db.users.update({username: "smith"}, {$unset: {country: 1}})



- Updating Complex Data

    - Let's say users can also store their favorite things:

        {   
          username: "smith",  
          favorites: {
             cities: ["Chicago", "Cheyenne"],
             movies: ["Casablanca", "For a Few Dollars More", "The Sting"]
          }
        }


    - To modify the original 'smith' record to look like this, we can use the $set
        operator:

        > db.users.update( {username: 'smith'},
            {
              $set: {
                favorites: {
                  cities: ["Chicago", "Cheyenne"],
                  movies: ["Casablanca", "For a Few Dollars More", "The Sting"]
                }
              }
            })


    - We'll modify the 'jones' record also, but only include movies:

        > db.users.update( {username: "jones"},
            {
              $set: {
                favorites: {
                  movies: ["Casablanca", "Rocky"]
                }
              }
            })


    - Now, we can check to make sure our updates succeeded:

        > db.users.find().pretty()

      By default, the 'find()' command will return 20 documents (if they're available).


    - To find users by favorite movie:

        > db.users.find({"favorites.movies": "Casablanca"})


    - To add a movie to a user's favorite movies, we can use the '$addToSet' operator.

        > db.users.update( {"favorites.movies": "Casablanca"},
              {$addToSet: {"favorites.movies": "The Maltese Falcon"} },
              false,
              true )

      Here, the third argument determines whether an upsert is allowed (whether to add the
        'movies' set if it doesn't already exist).

      The fourth argument determines whether this is a multi-update (whether to update 
        multiple matching records or only the first one found).



- Deleting Data

    - To clear a collection of all it's documents:

        > db.foo.remove()


    - To delete a subset of documents based on a matcher:

        > db.users.remove({"favorites.cities": "Cheyenne"})


    - To drop an entire collection along with all it's indexes:

        > db.users.drop()



- Other Shell Features

    - To get help for the shell:

        > help


    - To get help for a certain type of object:

        > db.help()


    - To get options that can be used when starting the Mongo shell:

        $ mongo --help



- Creating a Querying With Indexes - Creating a Large Collection

    - Let's create a large collection by adding 20,000 simple documents to a 'numbers'
        collection.

        > for (i=0; i<20000; i++) {
            db.numbers.save({num: i});
          }


    - To verify our new documents have been created:

        > db.numbers.count()
        > db.numbers.find()


    - To find a given document:

        > db.numbers.find({num: 500})



- Range Queries

    - You can run range queries using the $lt and $gt operators.

        // Greater than 19995
        > db.numbers.find( {num: {"$gt": 19995 }} )

        // Retrieves 21-14
        > db.numbers.find( {num: {"$gt": 20, "$lt": 25 }} )



- Indexing and explain()

    - We can run an explain plan on any query.  This is helpful when diagnosing
        performance issues.

        > db.numbers.find({num: {"$gt": 19995}}).explain("executionStats")

        "executionStats" : {        
            "executionSuccess" : true,
            "nReturned" : 4,
            "executionTimeMillis" : 8,
            "totalKeysExamined" : 0,
            "totalDocsExamined" : 20000,
            ...
        }


    - Next, we create an index to speed up performance:

        > db.numbers.createIndex({num: 1}) {    
            "createdCollectionAutomatically" : false,
            "numIndexesBefore" : 1,
            "numIndexesAfter" : 2,    
            "ok" : 1
          }


    - To see the indexes we have on the collections:

        > db.numbers.getIndexes()

        [    
          {        
            "v" : 1,
            "key" : {
              "_id" : 1
            },
            "name" : "_id_",
            "ns" : "tutorial.numbers"
          },    
          {
            "v" : 1,
            "key" : {
              "num" : 1
            },
            "name" : "num_1",
            "ns" : "tutorial.numbers"
          }
        ]


    - Now, when we run the query again, we'll see that we get much faster performance, only
        scanning the documents that match our criteria:

        > db.numbers.find({num: {"$gt": 19995}}).explain("executionStats")

        "executionStats" : {
          "executionSuccess" : true,
          "nReturned" : 4,
          "executionTimeMillis" : 0,
          "totalKeysExamined" : 4,
          "totalDocsExamined" : 4,
          ...
        }



- Basic Administration - Getting Database Information


- How Commands Work


- Getting Help